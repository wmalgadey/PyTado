[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "python-tado"
version = "0.18.5"
description = "PyTado from chrism0dwk, modfied by w.malgadey, diplix, michaelarnauts, LenhartStephan, splifter, syssi, andersonshatch, Yippy, p0thi, Coffee2CodeNL, chiefdragon, FilBr, nikilase, albertomontesg, Moritz-Schmidt, palazzem"
authors = [
    { name = "Chris Jewell", email = "chrism0dwk@gmail.com" },
    { name = "w.malgadey", email = "w.malgadey@gmail.com" },
    { name = "FilBr", email = "filippo.barba@protonmail.com" },
]
dependencies = ["requests"]
requires-python = ">=3.11"
readme = "README.md"
license = { file = "LICENSE" }
keywords = ["tado"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Topic :: Home Automation",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[project.urls]
GitHub = "https://github.com/wmalgadey/PyTado"

[project.optional-dependencies]
dev = ["black>=24.3", "pre-commit", "pytype", "pylint", "types-requests", "requests", "responses", "coverage", "pytest", "pytest-cov"]

all = [
  "python-tado[dev]",
]

[project.scripts]
pytado = "pytado.__main__:main"

[tool.setuptools]
platforms = ["any"]
zip-safe = false

[tool.black]
line-length = 80
target-version = ['py311']

[tool.pytype]
python_version = '3.11'

# This Pylint rcfile contains a best-effort configuration to uphold the
# best-practices and style described in the Google Python style guide:
#   https://google.github.io/styleguide/pyguide.html
#
# Its canonical open-source location is:
#   https://google.github.io/styleguide/pylintrc
[tool.pylint.MAIN]

ignore = ''
ignore-patterns = ''
load-plugins = ''
jobs = 0
unsafe-load-any-extension = 'no'

[tool.pylint."MESSAGES CONTROL"]

confidence = ''

disable = '''R,
abstract-method,
apply-builtin,
arguments-differ,
attribute-defined-outside-init,
backtick,
bad-option-value,
basestring-builtin,
buffer-builtin,
c-extension-no-member,
consider-using-enumerate,
cmp-builtin,
cmp-method,
coerce-builtin,
coerce-method,
delslice-method,
div-method,
eq-without-hash,
execfile-builtin,
file-builtin,
filter-builtin-not-iterating,
fixme,
getslice-method,
global-statement,
hex-method,
idiv-method,
implicit-str-concat,
import-error,
import-self,
import-star-module-level,
input-builtin,
intern-builtin,
invalid-str-codec,
locally-disabled,
long-builtin,
long-suffix,
map-builtin-not-iterating,
misplaced-comparison-constant,
missing-function-docstring,
metaclass-assignment,
next-method-called,
next-method-defined,
no-absolute-import,
no-init,  # addedno-member,
no-name-in-module,
no-self-use,
nonzero-method,
oct-method,
old-division,
old-ne-operator,
old-octal-literal,
old-raise-syntax,
parameter-unpacking,
print-statement,
raising-string,
range-builtin-not-iterating,
raw_input-builtin,
rdiv-method,
reduce-builtin,
relative-import,
reload-builtin,
round-builtin,
setslice-method,
signature-differs,
standarderror-builtin,
suppressed-message,
sys-max-int,
trailing-newlines,
unichr-builtin,
unicode-builtin,
unnecessary-pass,
unpacking-in-except,
useless-else-on-loop,
useless-suppression,
using-cmp-argument,
wrong-import-order,
xrange-builtin,
zip-builtin-not-iterating,
'''

[tool.pylint.REPORTS]

output-format = 'text'

reports = 'no'

evaluation = '10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)'

[tool.pylint.BASIC]

good-names = 'main,_'

bad-names = ''

property-classes = 'abc.abstractproperty,cached_property.cached_property,cached_property.threaded_cached_property,cached_property.cached_property_with_ttl,cached_property.threaded_cached_property_with_ttl'
function-rgx = '^(?:(?P<exempt>setUp|tearDown|setUpModule|tearDownModule)|(?P<camel_case>_?[A-Z][a-zA-Z0-9]*)|(?P<snake_case>_?[a-z][a-z0-9_]*))$'
variable-rgx = '^[a-z][a-z0-9_]*$'
const-rgx = '^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$'
attr-rgx = '^_{0,2}[a-z][a-z0-9_]*$'
argument-rgx = '^[a-z][a-z0-9_]*$'
class-attribute-rgx = '^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$'
inlinevar-rgx = '^[a-z][a-z0-9_]*$'
class-rgx = '^_?[A-Z][a-zA-Z0-9]*$'
module-rgx = '^(_?[a-z][a-z0-9_]*|__init__)$'
method-rgx = '(?x)^(?:(?P<exempt>_[a-z0-9_]+__|runTest|setUp|tearDown|setUpTestCase|tearDownTestCase|setupSelf|tearDownClass|setUpClass|(test|assert)_*[A-Z0-9][a-zA-Z0-9_]*|next)|(?P<camel_case>_{0,2}[A-Z][a-zA-Z0-9_]*)|(?P<snake_case>_{0,2}[a-z][a-z0-9_]*))$'
no-docstring-rgx = '(__.*__|main|test.*|.*test|.*Test)$'

# Good variable names which should always be accepted, separated by a comma
# Bad variable names which should always be refused, separated by a comma
# the name regexes allow several styles.
# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties.
# Regular expression matching correct function names
# Regular expression matching correct variable names
# Regular expression matching correct constant names
# Regular expression matching correct attribute names
# Regular expression matching correct argument names
# Regular expression matching correct class attribute names
# Regular expression matching correct inline iteration names
# Regular expression matching correct class names
# Regular expression matching correct module names
# Regular expression matching correct method names
# Regular expression which should only match function or class names that do
# not require a docstring.
# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length = 12


[tool.pylint.TYPECHECK]

contextmanager-decorators = 'contextlib.contextmanager,contextlib2.contextmanager'

ignored-modules = ''

# List of class names for which member attributes should not be checked (usefulignored-classes=optparse.Values,thread._local,_thread._local

generated-members = ''


[tool.pylint.FORMAT]

max-line-length = 80

ignore-long-lines = '''(?x)(
  ^\s*(\#\ )?<?https?://\S+>?$|
  ^\s*(from\s+\S+\s+)?import\s+.+$)'''

single-line-if-stmt = 'yes'

max-module-lines = 99999

indent-string = '    '

# Number of spaces of indent required inside a hanging  or continued line.
indent-after-paren = 4

expected-line-ending-format = ''


[tool.pylint.MISCELLANEOUS] # Expected format of line ending, e.g. empty (any line ending), LF or CRLF.

notes = 'TODO'


# List of note tags to take in consideration, separated by a comma.
[tool.pylint.STRING]

check-quote-consistency = 'yes'


# This flag controls whether inconsistent-quotes generates a warning when the
# character used as a quote delimiter is used inconsistently within a module.
[tool.pylint.VARIABLES]

init-import = 'no'

dummy-variables-rgx = '^\*{0,2}(_$|unused_|dummy_)'

additional-builtins = ''

redefining-builtins-modules = 'six,six.moves,past.builtins,future.builtins,functools'

[tool.pylint.LOGGING]

logging-modules = 'logging'

[tool.pylint.SIMILARITIES]

ignore-comments = 'yes'
ignore-docstrings = 'yes'
ignore-imports = 'no'


min-similarity-lines = 4
[tool.pylint.SPELLING]

spelling-dict = ''

[tool.pylint.IMPORTS]

deprecated-modules = '''regsub,
TERMIOS,
Bastion,
rexec,
sets'''
analyse-fallback-blocks = 'no'
import-graph = ''
ext-import-graph = ''
int-import-graph = ''


# Deprecated modules which should not be used, separated by a comma
# given file (report RP0402 must not be disabled)
# not be disabled)
# not be disabled)
# compatibility libraries.
# Analyse import fallback blocks. This can be used to support both Python 2 and
# 3 compatible code, which means that the block might have code that exists
# only in one or another interpreter, leading to false positives when analysed.
[tool.pylint.CLASSES]

defining-attr-methods = '''__init__,
__new__,
setUp

# List of member names, which should be excluded from the protected accessexclude-protected=_asdict,
_fields,
_replace,
_source,
_make

# List of valid names for the first argument in a class method.valid-classmethod-first-arg=cls,
class_
'''
# List of valid names for the first argument in a metaclass class method.valid-metaclass-classmethod-first-arg=mcs
# List of method names used to declare (i.e. assign) instance attributes.
# warning.
